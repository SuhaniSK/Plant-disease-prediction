{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "63b9239d-e8c8-4b51-997b-3e66249d3e47",
   "metadata": {},
   "outputs": [],
   "source": [
    "import streamlit as st\n",
    "import tensorflow as tf\n",
    "import numpy as np\n",
    "\n",
    "\n",
    "#Tensorflow Model Prediction\n",
    "def model_prediction(test_image):\n",
    "    model = tf.keras.models.load_model(\"trained_plant_disease_model.keras\")\n",
    "    image = tf.keras.preprocessing.image.load_img(test_image,target_size=(128,128))\n",
    "    input_arr = tf.keras.preprocessing.image.img_to_array(image)\n",
    "    input_arr = np.array([input_arr]) #convert single image to batch\n",
    "    predictions = model.predict(input_arr)\n",
    "    return np.argmax(predictions) #return index of max element\n",
    "\n",
    "#Sidebar\n",
    "st.sidebar.title(\"Dashboard\")\n",
    "app_mode = st.sidebar.selectbox(\"Select Page\",[\"Home\",\"About\",\"Disease Recognition\"])\n",
    "\n",
    "#Main Page\n",
    "if(app_mode==\"Home\"):\n",
    "    st.header(\"PLANT DISEASE RECOGNITION SYSTEM\")\n",
    "    image_path = \"home_page.jpeg\"\n",
    "    st.image(image_path,use_column_width=True)\n",
    "    st.markdown(\"\"\"\n",
    "    Welcome to the Plant Disease Recognition System! üåøüîç\n",
    "    \n",
    "    Our mission is to help in identifying plant diseases efficiently. Upload an image of a plant, and our system will analyze it to detect any signs of diseases. Together, let's protect our crops and ensure a healthier harvest!\n",
    "\n",
    "    ### How It Works\n",
    "    1. **Upload Image:** Go to the **Disease Recognition** page and upload an image of a plant with suspected diseases.\n",
    "    2. **Analysis:** Our system will process the image using advanced algorithms to identify potential diseases.\n",
    "    3. **Results:** View the results and recommendations for further action.\n",
    "\n",
    "    ### Why Choose Us?\n",
    "    - **Accuracy:** Our system utilizes state-of-the-art machine learning techniques for accurate disease detection.\n",
    "    - **User-Friendly:** Simple and intuitive interface for seamless user experience.\n",
    "    - **Fast and Efficient:** Receive results in seconds, allowing for quick decision-making.\n",
    "\n",
    "    ### Get Started\n",
    "    Click on the **Disease Recognition** page in the sidebar to upload an image and experience the power of our Plant Disease Recognition System!\n",
    "\n",
    "    ### About Us\n",
    "    Learn more about the project, our team, and our goals on the **About** page.\n",
    "    \"\"\")\n",
    "\n",
    "#About Project\n",
    "elif(app_mode==\"About\"):\n",
    "    st.header(\"About\")\n",
    "    st.markdown(\"\"\"\n",
    "                #### About Dataset\n",
    "                This dataset is recreated using offline augmentation from the original dataset.The original dataset can be found on this github repo.\n",
    "                This dataset consists of about 87K rgb images of healthy and diseased crop leaves which is categorized into 38 different classes.The total dataset is divided into 80/20 ratio of training and validation set preserving the directory structure.\n",
    "                A new directory containing 33 test images is created later for prediction purpose.\n",
    "                #### Content\n",
    "                1. train (70295 images)\n",
    "                2. test (33 images)\n",
    "                3. validation (17572 images)\n",
    "\n",
    "                \"\"\")\n",
    "\n",
    "#Prediction Page\n",
    "elif(app_mode==\"Disease Recognition\"):\n",
    "    st.header(\"Disease Recognition\")\n",
    "    test_image = st.file_uploader(\"Choose an Image:\")\n",
    "    if(st.button(\"Show Image\")):\n",
    "        st.image(test_image,width=4,use_column_width=True)\n",
    "    #Predict button\n",
    "    if(st.button(\"Predict\")):\n",
    "        st.snow()\n",
    "        st.write(\"Our Prediction\")\n",
    "        result_index = model_prediction(test_image)\n",
    "        #Reading Labels\n",
    "        class_name = ['Apple___Apple_scab', 'Apple___Black_rot', 'Apple___Cedar_apple_rust', 'Apple___healthy',\n",
    "                    'Blueberry___healthy', 'Cherry_(including_sour)___Powdery_mildew', \n",
    "                    'Cherry_(including_sour)___healthy', 'Corn_(maize)___Cercospora_leaf_spot Gray_leaf_spot', \n",
    "                    'Corn_(maize)___Common_rust_', 'Corn_(maize)___Northern_Leaf_Blight', 'Corn_(maize)___healthy', \n",
    "                    'Grape___Black_rot', 'Grape___Esca_(Black_Measles)', 'Grape___Leaf_blight_(Isariopsis_Leaf_Spot)', \n",
    "                    'Grape___healthy', 'Orange___Haunglongbing_(Citrus_greening)', 'Peach___Bacterial_spot',\n",
    "                    'Peach___healthy', 'Pepper,_bell___Bacterial_spot', 'Pepper,_bell___healthy', \n",
    "                    'Potato___Early_blight', 'Potato___Late_blight', 'Potato___healthy', \n",
    "                    'Raspberry___healthy', 'Soybean___healthy', 'Squash___Powdery_mildew', \n",
    "                    'Strawberry___Leaf_scorch', 'Strawberry___healthy', 'Tomato___Bacterial_spot', \n",
    "                    'Tomato___Early_blight', 'Tomato___Late_blight', 'Tomato___Leaf_Mold', \n",
    "                    'Tomato___Septoria_leaf_spot', 'Tomato___Spider_mites Two-spotted_spider_mite', \n",
    "                    'Tomato___Target_Spot', 'Tomato___Tomato_Yellow_Leaf_Curl_Virus', 'Tomato___Tomato_mosaic_virus',\n",
    "                      'Tomato___healthy']\n",
    "        st.success(\"Model is Predicting it's a {}\".format(class_name[result_index]))"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [conda env:base] *",
   "language": "python",
   "name": "conda-base-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
